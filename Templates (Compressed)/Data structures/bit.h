#define BIT_DATA_TYPE int
const int BIT_SIZE=100000;struct BIT{BIT_DATA_TYPE tree[BIT_SIZE];int size;void build(BIT_DATA_TYPE*data,register int datasize){size=datasize;for(register int i=1;i<=datasize;++i){tree[i]+=data[i];if(i+lowbit(i)<=size)tree[i+lowbit(i)]+=tree[i];}return;}BIT_DATA_TYPE getsum(register int l,register int r){return presum(r)-presum(l-1);}BIT_DATA_TYPE presum(register int pos){BIT_DATA_TYPE sum=0;while(pos)sum+=tree[pos],pos-=lowbit(pos);return sum;}void add(register BIT_DATA_TYPE data,register int pos){while(pos<=size)tree[pos]+=data,pos+=lowbit(pos);}inline int lowbit(BIT_DATA_TYPE x){return x&-x;}void clear(register int pos){while(pos<=size)tree[pos]=0,pos+=lowbit(pos);}void clear(){memset(this,0,sizeof(BIT));return;}};