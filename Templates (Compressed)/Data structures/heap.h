#define HEAP_DATA_TYPE int
#define HEAP_COMPARE_TYPE >
const int HEAP_SIZE=1000000;struct HEAP{HEAP_DATA_TYPE heap[HEAP_SIZE];int tail;HEAP(){tail=0;return;}void build(HEAP_DATA_TYPE*data,int n){register int i;tail=n;for(i=1;i<=n;++i)heap[i]=data[i];for(i=tail>>1;i>=1;--i){down(i);}return;}void swap(int pos1,int pos2){HEAP_DATA_TYPE temp=heap[pos1];heap[pos1]=heap[pos2];heap[pos2]=temp;return;}bool empty(){return size()==0;}int size(){return tail;}HEAP_DATA_TYPE top(){return heap[1];}void push(HEAP_DATA_TYPE in){insert(in,++tail);return;}void pop(){heap[1]=heap[tail--];down(1);return;}int down(register int pos){register int next;while((pos<<1)<=tail){next=pos<<1;if(((next|1)<=tail)&&(heap[next|1]HEAP_COMPARE_TYPE heap[next]))next|=1;if(heap[next]HEAP_COMPARE_TYPE heap[pos]){swap(next,pos);pos=next;}else break;}return pos;}void up(register int pos){while((pos>1)&&(heap[pos]HEAP_COMPARE_TYPE heap[pos>>1])){swap(pos,pos>>1);pos>>=1;}return;}void insert(HEAP_DATA_TYPE data,register int pos){heap[pos]=data;up(down(pos));return;}};